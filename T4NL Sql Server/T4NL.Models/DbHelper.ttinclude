<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data.SqlClient" #>
<#+
    public class DBHelper
    {

        // 数据库连接
        public static string connectionString = @"Data Source=IP;Database=database;User ID=sa;Password=pwd;";
        // 需要解析的数据库
        public static string database = "database name";

        public static List<Entity> GetEntities()
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append("select o.name as 'tableName',o.type as 'tableType',c.name as 'colunmName',c.column_id as columnid," +
                "c.is_identity,c.max_length as maxlength,t.name as dbtype,c.scale,c.is_nullable as isnullable,ep.value as remark ");
            strsql.Append($" from {database}.sys.columns c ");
            strsql.Append($" left join {database}.sys.objects o on c.object_id=o.object_id" );
            strsql.Append($" left join {database}.sys.types t on t.system_type_id=c.system_type_id" );
            strsql.Append($" left join {database}.sys.extended_properties ep on c.object_id=ep.major_id and c.column_id=ep.minor_id ");
            strsql.Append($" where   t.name<>'sysname' and o.type='U' or o.type='V' and o.name<>'sysdiagrams'; ");

            var list = new List<Entity>();

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = connection.CreateCommand();
                command.CommandText = strsql.ToString();
                connection.Open();
                SqlDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    var tableName = reader["tableName"] == DBNull.Value ? string.Empty : reader["tableName"].ToString();
                    var tableType = reader["tableType"] == DBNull.Value ? string.Empty : reader["tableType"].ToString().ToLower().Trim();
                    var colunmName = reader["colunmName"] == DBNull.Value ? string.Empty : reader["colunmName"].ToString();
                    var columnid = reader["columnid"] == DBNull.Value ? 0 : int.Parse(reader["columnid"].ToString());
                    var is_identity = reader["is_identity"] == DBNull.Value ? string.Empty : reader["is_identity"].ToString();
                    var maxlength = reader["maxlength"] == DBNull.Value ? 0 : int.Parse(reader["maxlength"].ToString());
                    var dbtype = reader["dbtype"] == DBNull.Value ? string.Empty : reader["dbtype"].ToString();
                    var scale = reader["scale"] == DBNull.Value ? string.Empty : reader["scale"].ToString();
                    var isnullable = reader["isnullable"] == DBNull.Value ? false : reader["isnullable"].ToString() == "1";
                    var remark = reader["remark"] == DBNull.Value ? string.Empty : reader["remark"].ToString();

                    var entity = list.FirstOrDefault(x => x.EntityName == tableName);

                    if (entity == null)
                    {
                        entity = new Entity(tableName);

                        if (String.IsNullOrEmpty(entity.DateTimeColumnName))
                        {
                            if (dbtype.ToLower().Contains("date") || dbtype.ToLower().Contains("time"))
                            {
                                entity.DateTimeColumnName = colunmName;
                            }
                        }
						entity.TableType = tableType;
                        entity.Fields.Add(new Field
                        {
                            columnName = colunmName,
                            isNullable = isnullable,
                            maxLength = maxlength,
                            dataType = SqlServerDbTypeMap.GetCSharpType(dbtype),
                            columnComment = remark,
                            columnType = dbtype,
							columnid= columnid,
                            sqlDateType = SqlServerDbTypeMap.GetSqlDateType(dbtype)
                        });
                        list.Add(entity);
                    }
                    else
                    {
                        //判断表是否包含时间字段
                        if (String.IsNullOrEmpty(entity.DateTimeColumnName))
                        {
                            if (dbtype.ToLower().Contains("date") || dbtype.ToLower().Contains("time"))
                            {
                                entity.DateTimeColumnName = colunmName;
                            }
                        }
                        entity.Fields.Add(new Field
                        {
                            columnName = colunmName,
                            isNullable = isnullable,
                            maxLength = maxlength,
                            dataType = SqlServerDbTypeMap.GetCSharpType(dbtype),
                            columnComment = remark,
                            columnType = dbtype,
							columnid = columnid,
                            sqlDateType = SqlServerDbTypeMap.GetSqlDateType(dbtype)
                        });
						entity.Fields = entity.Fields.OrderBy(o => o.columnid).ToList();
                    }
                }
                connection.Close();
            }
            return list;
        }
    }

    public class Entity
    {
        public Entity()
        {
            this.Fields = new List<Field>();
        }

        public Entity(string name)
            : this()
        {
            this.EntityName = name;
        }


        public string DateTimeColumnName { get; set; }

        public string EntityName { get; set; }
		public string TableType { get; set; }
        public List<Field> Fields { get; set; }
    }

    public class Field
    {
        public string columnName { get; set; }
        public bool isNullable { get; set; }
        public int maxLength { get; set; }
		public int columnid { get; set; }
        public string dataType { get; set; }
        public string columnComment { get; set; }
        public string columnType { get; set; }
        public string sqlDateType { get; set; }
    }

    #region SqlServerDbTypeMap

    public class SqlServerDbTypeMap
    {
        public static string GetCSharpType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return dbtype;
            dbtype = dbtype.ToLower();
            string csharpType = "object";
            switch (dbtype)
            {
                case "bigint": csharpType = "long"; break;
                case "binary": csharpType = "byte[]"; break;
                case "bit": csharpType = "bool"; break;
                case "char": csharpType = "string"; break;
                case "date": csharpType = "DateTime"; break;
                case "datetime": csharpType = "DateTime"; break;
                case "datetime2": csharpType = "DateTime"; break;
                case "datetimeoffset": csharpType = "DateTimeOffset"; break;
                case "decimal": csharpType = "decimal"; break;
                case "float": csharpType = "double"; break;
                case "image": csharpType = "byte[]"; break;
                case "int": csharpType = "int"; break;
                case "money": csharpType = "decimal"; break;
                case "nchar": csharpType = "string"; break;
                case "ntext": csharpType = "string"; break;
                case "numeric": csharpType = "decimal"; break;
                case "nvarchar": csharpType = "string"; break;
                case "real": csharpType = "Single"; break;
                case "smalldatetime": csharpType = "DateTime"; break;
                case "smallint": csharpType = "short"; break;
                case "smallmoney": csharpType = "decimal"; break;
                case "sql_variant": csharpType = "object"; break;
                case "sysname": csharpType = "object"; break;
                case "text": csharpType = "string"; break;
                case "time": csharpType = "TimeSpan"; break;
                case "timestamp": csharpType = "byte[]"; break;
                case "tinyint": csharpType = "byte"; break;
                case "uniqueidentifier": csharpType = "Guid"; break;
                case "varbinary": csharpType = "byte[]"; break;
                case "varchar": csharpType = "string"; break;
                case "xml": csharpType = "string"; break;
                default: csharpType = "object"; break;
            }
            return csharpType;
        }

		public static string GetModelCSharpType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return dbtype;
            string IsNullable = string.Empty;
            List<string> NotNullableList = new List<string>() { "int", "DateTime", "decimal", "bool", "double", "float", "byte", "long", "DateTimeOffset", "Single", "short", "TimeSpan", "byte", "Guid" };
            if (NotNullableList.Contains(dbtype))
                IsNullable = "?";
            return dbtype + IsNullable;
        }

        public static string GetSqlDateType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return dbtype;
            dbtype = dbtype.ToLower();
            switch (dbtype)
            {
                case "bigint":
                    return "BigInt";
                case "binary":
                    return "Binary";
                case "bit":
                    return "Bit";
                case "char":
                    return "Char";
                case "date":
                    return "Date";
                case "datetime":
                    return "DateTime";
                case "datetime2":
                    return "DateTime2";
                case "datetimeoffset":
                    return "DateTimeOffset";
                case "decimal":
                    return "Decimal";
                case "float":
                    return "Float";
                case "image":
                    return "Image";
                case "int":
                    return "Int";
                case "money":
                    return "Money";
                case "nchar":
                    return "NChar";
                case "ntext":
                    return "NText";
                case "numeric":
                    return "Real";
                case "nvarchar":
                    return "NVarChar";
                case "real":
                    return "Real";
                case "smalldatetime": return "SmallDateTime";
                case "smallint": return "SmallInt";
                case "smallmoney": return "SmallMoney";
                case "text": return "Text";
                case "time": return "Time";
                case "timestamp": return "Timestamp";
                case "tinyint": return "TinyInt";
                case "uniqueidentifier":return "UniqueIdentifier";
                case "varbinary": return "VarBinary";
                case "varchar": return "VarChar";
                case "xml": return "Xml";
                default: return "VarChar";
            }
        }

        public static string DbTypeHelper(string dbType)
        {
            switch (dbType.ToLower())
            {

                case "bigint":
				case "long":
                    return "ToLong_V()";
                case "smallint":
                case "tinyint":
                case "mediumint":
                case "int":
                case "integer":
                    return "ToInt_V()";
                case "double":
                    return "ToDouble_V()";
                case "float":
                case "decimal":
                case "numeric":
                case "real":
                case "money":
                case "smallmoney":
                    return "ToDecimal_V()";
                case "bit":
                case "bool":
                    return "ToBoolean_V()";
                case "date":
                case "time":
                case "year":
                case "datetime":
                case "timestamp":
                case "datetime2":
                case "datetimeoffset":
                case "smalldatetime":
                    return "ToDateTime_V()";
                case "string":
                case "tinyblob":
                case "blob":
                case "mediumblob":
                case "longblog":
                case "binary":
                case "varbinary":
                case "image":
                case "text":
                case "varchar":
                    return "ToString_V()";
                case "char":
                case "tinytext":
                case "mediumtext":
                case "longtext":
                case "nchar":
                case "ntext":
                case "nvarchar":
                    return "ToString_V()";
                case "point":
                case "linestring":
                case "polygon":
                case "geometry":
                case "multipoint":
                case "multilinestring":
                case "multipolygon":
                case "geometrycollection":
                case "enum":
                case "set":
                default:
                    return dbType;
            }
        }

    }
    #endregion
#>